#!/usr/bin/env python

from TCGAdnloader import downloader
from TCGAdnloader.setting import CANCER_LIST
import argparse,os

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Tools to download public genomic data", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-o', '--output', type=str, required=True, help="Output directory")
    parser.add_argument('-r', '--ref', nargs='+',
                        required=False, help="Aligned Reference",default=['hg19','hg38'])
    parser.add_argument('-c', '--cancer', nargs='+',default=CANCER_LIST,
                        required=False,help="Cancer type included")
    parser.add_argument('-m', '--meta', default=True,help="Whether alson download the meta information.")
    parser.add_argument('-t', '--datatype', nargs='+', default=['rnaseq','cnv','rppa','snv'],
                        required=False,help="Data type included")
                        
    args = parser.parse_args()
 
    for cancer in args.cancer:
        if 'hg19' in args.ref:
            # save the downloaded info
            if os.path.isfile('/'.join([args.output, 'hg19_download.log'])):
                with open('/'.join([args.output, 'hg19_download.log']), 'r') as f:
                    content = f.readlines()
                content = [x.strip() for x in content]

            else:
                content = []
            
            if not cancer in content :
                dl = downloader.FireBrowseDnloader(parental_dir=args.output+'/hg19',
                                                cancer=cancer,
                                                workflow=args.datatype)
                dl.run()
                with open('/'.join([args.output,'hg19_download.log']),'a+') as f:
                    f.write(cancer+'\n')

        if 'hg38' in args.ref:
            if os.path.isfile('/'.join([args.output, 'hg38_download.log'])):
                with open('/'.join([args.output, 'hg38_download.log']), 'r') as f:
                    content = f.readlines()
                content = [x.strip() for x in content]
            else:
                content = []
            if not cancer in content:
                dl = downloader.GdcDnloader(parental_dir=args.output+'/hg38',
                                            cancer=cancer,
                                            workflow=args.datatype)
                dl.run()
                with open('/'.join([args.output, 'hg38_download.log']), 'a+') as f:
                    f.write(cancer+'\n')

        if args.meta == True and cancer != 'LAML':
            if os.path.isfile('/'.join([args.output, 'meta_download.log'])):
                with open('/'.join([args.output, 'meta_download.log']),'r') as f:
                    content = f.readlines()
                content = [x.strip() for x in content]
            else:
                content = []

            if not cancer in content:
                dl = downloader.GdcApi(parental_dir=args.output,
                                            cancer=cancer)
                dl.clin()
                dl.biospecimen()
                with open('/'.join([args.output, 'meta_download.log']), 'a+') as f:
                    f.write(cancer+'\n')
   
